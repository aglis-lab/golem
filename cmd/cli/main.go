package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
)

const (
	pagesDir   = "views/pages"
	outputFile = "web/routes.gen.go"
)

func main() {
	routes := []string{}
	err := filepath.Walk(pagesDir, func(path string, info os.FileInfo, err error) error {
		fmt.Println("Processing:", path)

		if err != nil || info.IsDir() {
			return nil
		}

		relPath, _ := filepath.Rel(pagesDir, path)
		if !strings.HasSuffix(relPath, ".tsx") {
			return nil
		}

		routePath := convertToRoute(relPath)
		viewPath := filepath.ToSlash("pages/" + relPath[:len(relPath)-4]) // Remove .tsx
		route := fmt.Sprintf(`    r.Page("%s", view.Static("%s"))`, routePath, viewPath)
		routes = append(routes, route)
		return nil
	})
	if err != nil {
		log.Fatalln(err)
	}

	generateGoFile(routes)
}

func convertToRoute(file string) string {
	parts := strings.Split(file, string(os.PathSeparator))
	for i, part := range parts {
		name := strings.TrimSuffix(part, ".tsx")
		name = strings.ReplaceAll(name, "[", ":")
		name = strings.ReplaceAll(name, "]", "")
		if name == "index" {
			parts[i] = ""
		} else {
			parts[i] = name
		}
	}
	path := "/" + strings.Join(parts, "/")
	path = strings.ReplaceAll(path, "//", "/")
	return strings.TrimSuffix(path, "/")
}

func generateGoFile(routes []string) {
	for _, v := range routes {
		fmt.Println("Generated route:", v)
	}

	// 	content := `// Code generated by generate_routes.go; DO NOT EDIT.

	// package web

	// import (
	//     "github.com/golem/framework"
	//     "myapp/view"
	// )

	// func Router(r *golem.Router) {
	// `

	// 	for _, route := range routes {
	// 		content += route + "\n"
	// 	}

	// 	content += "}\n"

	// os.MkdirAll(filepath.Dir(outputFile), os.ModePerm)
	// os.WriteFile(outputFile, []byte(content), 0644)
	// fmt.Println("âœ… Routes generated in", outputFile)
}
